"""
üö® Syst√®me d'Alertes Intelligentes - PlannerIA
D√©tection pr√©coce des probl√®mes et alertes contextuelles avec IA
"""

import streamlit as st
import pandas as pd
import numpy as np
from typing import Dict, List, Any, Tuple, Optional
from dataclasses import dataclass, field
from enum import Enum
from datetime import datetime, timedelta
import json
import asyncio
from collections import deque
import warnings


class AlertLevel(Enum):
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


class AlertCategory(Enum):
    TIMELINE = "timeline"
    BUDGET = "budget"
    QUALITY = "quality"
    TEAM = "team"
    RISK = "risk"
    PERFORMANCE = "performance"
    BUSINESS = "business"


@dataclass
class Alert:
    """Alerte intelligente"""
    id: str
    level: AlertLevel
    category: AlertCategory
    title: str
    description: str
    recommended_actions: List[str]
    data_points: Dict[str, Any]
    confidence: float
    created_at: datetime
    expires_at: Optional[datetime] = None
    dismissed: bool = False
    auto_generated: bool = True


@dataclass
class AlertRule:
    """R√®gle d'alerte personnalisable"""
    rule_id: str
    name: str
    category: AlertCategory
    condition: str  # Expression √† √©valuer
    threshold_values: Dict[str, float]
    alert_level: AlertLevel
    cooldown_minutes: int = 60
    enabled: bool = True


class SmartAlertSystem:
    """Syst√®me d'alertes intelligentes avec IA pr√©dictive"""
    
    def __init__(self):
        self.alerts_history = deque(maxlen=1000)
        self.active_alerts = {}
        self.alert_rules = self._initialize_alert_rules()
        self.metrics_history = deque(maxlen=100)  # Historique des m√©triques
        self.ai_models = self._initialize_ai_models()
        self.alert_patterns = self._load_alert_patterns()
        
    def _initialize_alert_rules(self) -> Dict[str, AlertRule]:
        """Initialise les r√®gles d'alerte par d√©faut"""
        rules = {
            'budget_overrun': AlertRule(
                rule_id='budget_overrun',
                name='D√©passement budg√©taire',
                category=AlertCategory.BUDGET,
                condition='current_cost > budget * 0.9',
                threshold_values={'budget_ratio': 0.9},
                alert_level=AlertLevel.WARNING
            ),
            'timeline_delay': AlertRule(
                rule_id='timeline_delay',
                name='Retard sur planning',
                category=AlertCategory.TIMELINE,
                condition='progress_ratio < expected_progress_ratio * 0.8',
                threshold_values={'progress_threshold': 0.8},
                alert_level=AlertLevel.WARNING
            ),
            'critical_budget': AlertRule(
                rule_id='critical_budget',
                name='Budget critique d√©pass√©',
                category=AlertCategory.BUDGET,
                condition='current_cost > budget * 1.1',
                threshold_values={'budget_ratio': 1.1},
                alert_level=AlertLevel.CRITICAL,
                cooldown_minutes=30
            ),
            'team_velocity_drop': AlertRule(
                rule_id='team_velocity_drop',
                name='Chute de v√©locit√© √©quipe',
                category=AlertCategory.TEAM,
                condition='current_velocity < avg_velocity * 0.7',
                threshold_values={'velocity_threshold': 0.7},
                alert_level=AlertLevel.WARNING
            ),
            'quality_degradation': AlertRule(
                rule_id='quality_degradation',
                name='D√©gradation qualit√© code',
                category=AlertCategory.QUALITY,
                condition='code_quality_score < 0.7',
                threshold_values={'quality_threshold': 0.7},
                alert_level=AlertLevel.WARNING
            ),
            'high_risk_detected': AlertRule(
                rule_id='high_risk_detected',
                name='Risque √©lev√© d√©tect√©',
                category=AlertCategory.RISK,
                condition='risk_score > 0.8',
                threshold_values={'risk_threshold': 0.8},
                alert_level=AlertLevel.ERROR
            ),
            'performance_degradation': AlertRule(
                rule_id='performance_degradation',
                name='D√©gradation performance',
                category=AlertCategory.PERFORMANCE,
                condition='response_time > 2000 or error_rate > 0.05',
                threshold_values={'response_time_ms': 2000, 'error_rate': 0.05},
                alert_level=AlertLevel.WARNING
            ),
            'stakeholder_satisfaction': AlertRule(
                rule_id='stakeholder_satisfaction',
                name='Satisfaction stakeholder faible',
                category=AlertCategory.BUSINESS,
                condition='satisfaction_score < 0.6',
                threshold_values={'satisfaction_threshold': 0.6},
                alert_level=AlertLevel.WARNING
            )
        }
        return rules
    
    def _initialize_ai_models(self) -> Dict[str, Any]:
        """Initialise les mod√®les IA pour pr√©diction d'alertes"""
        # Mod√®les simul√©s pour la d√©mo - √† remplacer par de vrais mod√®les ML
        return {
            'anomaly_detector': {'type': 'isolation_forest', 'threshold': 0.1},
            'trend_predictor': {'type': 'lstm', 'lookback_days': 7},
            'risk_classifier': {'type': 'random_forest', 'confidence_threshold': 0.8}
        }
    
    def _load_alert_patterns(self) -> Dict[str, Any]:
        """Charge les patterns d'alertes historiques"""
        return {
            'cascade_patterns': {
                'budget_timeline': 'Budget overrun souvent suivi de retards',
                'team_quality': 'Probl√®mes √©quipe impactent la qualit√©',
                'performance_user': 'Probl√®mes perfs cr√©ent insatisfaction utilisateur'
            },
            'seasonal_patterns': {
                'monday_deployments': 'Plus d\'erreurs les lundis',
                'end_of_sprint': 'Baisse qualit√© en fin de sprint',
                'vacation_periods': 'Ralentissement pendant cong√©s'
            },
            'correlation_patterns': {
                'team_size_communication': 'Grandes √©quipes = + probl√®mes communication',
                'complexity_bugs': 'Complexit√© √©lev√©e = + bugs',
                'deadline_pressure_quality': 'Pression d√©lais = - qualit√©'
            }
        }
    
    async def monitor_project_metrics(self, project_data: Dict[str, Any]) -> List[Alert]:
        """Surveille les m√©triques et g√©n√®re des alertes"""
        
        # Collecte des m√©triques actuelles
        current_metrics = self._extract_current_metrics(project_data)
        self.metrics_history.append({
            'timestamp': datetime.now(),
            'metrics': current_metrics
        })
        
        # √âvaluation des r√®gles d'alerte
        rule_alerts = await self._evaluate_alert_rules(current_metrics)
        
        # D√©tection d'anomalies par IA
        ai_alerts = await self._detect_ai_anomalies(current_metrics)
        
        # Pr√©dictions d'alertes futures
        predictive_alerts = await self._predict_future_issues(current_metrics)
        
        # Combinaison et d√©duplication
        all_alerts = rule_alerts + ai_alerts + predictive_alerts
        unique_alerts = self._deduplicate_alerts(all_alerts)
        
        # Mise √† jour du syst√®me
        self._update_active_alerts(unique_alerts)
        
        return unique_alerts
    
    def _extract_current_metrics(self, project_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrait les m√©triques actuelles du projet"""
        
        # M√©triques de base
        overview = project_data.get('project_overview', {})
        phases = project_data.get('phases', [])
        tasks = project_data.get('tasks', [])
        risks = project_data.get('risks', [])
        
        # Calculs de progression
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks if t.get('status') == 'completed'])
        progress_ratio = completed_tasks / total_tasks if total_tasks > 0 else 0
        
        # Calculs budg√©taires
        budget = overview.get('total_cost', 100000)
        spent_budget = sum([p.get('cost', 0) for p in phases])
        budget_ratio = spent_budget / budget if budget > 0 else 0
        
        # Calculs temporels
        project_duration = overview.get('total_duration', 90)
        elapsed_days = 30  # Simul√© - √† calculer r√©ellement
        time_ratio = elapsed_days / project_duration if project_duration > 0 else 0
        
        expected_progress_ratio = time_ratio  # Progression attendue = temps √©coul√©
        
        # Calculs d'√©quipe et v√©locit√©
        team_size = len(project_data.get('resources', []))
        current_velocity = completed_tasks / elapsed_days if elapsed_days > 0 else 0
        
        # Calculs de qualit√© (simul√©s)
        code_quality_score = np.random.uniform(0.5, 0.9)  # √Ä remplacer par vraies m√©triques
        
        # Calculs de risque
        risk_scores = [r.get('risk_score', 0) for r in risks]
        avg_risk_score = np.mean(risk_scores) if risk_scores else 0
        
        # M√©triques de performance (simul√©es)
        response_time = np.random.uniform(500, 3000)
        error_rate = np.random.uniform(0.01, 0.1)
        
        # Satisfaction stakeholder (simul√©e)
        satisfaction_score = np.random.uniform(0.4, 0.9)
        
        return {
            # M√©triques temporelles
            'progress_ratio': progress_ratio,
            'expected_progress_ratio': expected_progress_ratio,
            'time_ratio': time_ratio,
            'elapsed_days': elapsed_days,
            'project_duration': project_duration,
            
            # M√©triques budg√©taires
            'current_cost': spent_budget,
            'budget': budget,
            'budget_ratio': budget_ratio,
            
            # M√©triques √©quipe
            'team_size': team_size,
            'current_velocity': current_velocity,
            'avg_velocity': current_velocity,  # Simul√©
            'completed_tasks': completed_tasks,
            'total_tasks': total_tasks,
            
            # M√©triques qualit√©
            'code_quality_score': code_quality_score,
            
            # M√©triques risque
            'risk_score': avg_risk_score,
            
            # M√©triques performance
            'response_time': response_time,
            'error_rate': error_rate,
            
            # M√©triques business
            'satisfaction_score': satisfaction_score,
            
            # M√©ta
            'timestamp': datetime.now()
        }
    
    async def _evaluate_alert_rules(self, metrics: Dict[str, Any]) -> List[Alert]:
        """√âvalue les r√®gles d'alerte configur√©es"""
        
        alerts = []
        
        for rule_id, rule in self.alert_rules.items():
            if not rule.enabled:
                continue
                
            # V√©rification cooldown
            if self._is_rule_in_cooldown(rule_id):
                continue
            
            try:
                # √âvaluation de la condition
                if self._evaluate_rule_condition(rule.condition, metrics, rule.threshold_values):
                    alert = self._create_rule_alert(rule, metrics)
                    alerts.append(alert)
                    
            except Exception as e:
                # Log de l'erreur d'√©valuation de r√®gle
                print(f"Erreur √©valuation r√®gle {rule_id}: {e}")
        
        return alerts
    
    def _is_rule_in_cooldown(self, rule_id: str) -> bool:
        """V√©rifie si une r√®gle est en cooldown"""
        if rule_id not in self.active_alerts:
            return False
            
        last_alert_time = self.active_alerts[rule_id].created_at
        cooldown_duration = timedelta(minutes=self.alert_rules[rule_id].cooldown_minutes)
        
        return datetime.now() - last_alert_time < cooldown_duration
    
    def _evaluate_rule_condition(self, condition: str, metrics: Dict[str, Any], 
                                thresholds: Dict[str, float]) -> bool:
        """√âvalue une condition d'alerte"""
        
        # Construction du contexte d'√©valuation
        eval_context = {**metrics, **thresholds}
        
        try:
            # √âvaluation s√©curis√©e de l'expression
            result = eval(condition, {"__builtins__": {}}, eval_context)
            return bool(result)
        except:
            return False
    
    def _create_rule_alert(self, rule: AlertRule, metrics: Dict[str, Any]) -> Alert:
        """Cr√©e une alerte bas√©e sur une r√®gle"""
        
        # G√©n√©ration des actions recommand√©es
        recommended_actions = self._generate_rule_recommendations(rule, metrics)
        
        # Extraction des points de donn√©es pertinents
        relevant_data = self._extract_relevant_data(rule.category, metrics)
        
        return Alert(
            id=f"{rule.rule_id}_{datetime.now().timestamp()}",
            level=rule.alert_level,
            category=rule.category,
            title=rule.name,
            description=self._generate_alert_description(rule, metrics),
            recommended_actions=recommended_actions,
            data_points=relevant_data,
            confidence=0.9,  # Haute confiance pour les r√®gles
            created_at=datetime.now(),
            auto_generated=True
        )
    
    def _generate_rule_recommendations(self, rule: AlertRule, metrics: Dict[str, Any]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur la r√®gle d√©clench√©e"""
        
        recommendations = {
            'budget_overrun': [
                "R√©viser le scope du projet pour rester dans le budget",
                "N√©gocier un budget suppl√©mentaire avec les stakeholders",
                "Optimiser l'allocation des ressources sur les t√¢ches critiques"
            ],
            'timeline_delay': [
                "Reprioriser les t√¢ches selon leur valeur business",
                "Augmenter temporairement les ressources sur le projet",
                "N√©gocier un report de deadline avec le client"
            ],
            'critical_budget': [
                "ARR√äTER imm√©diatement les d√©penses non-critiques",
                "Organiser une r√©union d'urgence avec la direction",
                "√âvaluer la faisabilit√© de continuer le projet"
            ],
            'team_velocity_drop': [
                "Identifier les blocages et obstacles de l'√©quipe",
                "Organiser une r√©trospective pour am√©liorer les processus",
                "V√©rifier la charge de travail et r√©partir si n√©cessaire"
            ],
            'quality_degradation': [
                "Renforcer les revues de code et tests automatis√©s",
                "Pr√©voir du temps pour refactoring technique",
                "Former l'√©quipe aux meilleures pratiques"
            ],
            'high_risk_detected': [
                "Activer imm√©diatement les plans de mitigation",
                "Informer les stakeholders des risques identifi√©s",
                "Revoir et mettre √† jour les strat√©gies de risque"
            ]
        }
        
        return recommendations.get(rule.rule_id, ["Analyser les causes et ajuster la strat√©gie"])
    
    def _extract_relevant_data(self, category: AlertCategory, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Extrait les donn√©es pertinentes pour une cat√©gorie d'alerte"""
        
        category_mappings = {
            AlertCategory.BUDGET: ['current_cost', 'budget', 'budget_ratio'],
            AlertCategory.TIMELINE: ['progress_ratio', 'expected_progress_ratio', 'elapsed_days'],
            AlertCategory.TEAM: ['team_size', 'current_velocity', 'completed_tasks'],
            AlertCategory.QUALITY: ['code_quality_score'],
            AlertCategory.RISK: ['risk_score'],
            AlertCategory.PERFORMANCE: ['response_time', 'error_rate'],
            AlertCategory.BUSINESS: ['satisfaction_score']
        }
        
        relevant_keys = category_mappings.get(category, [])
        return {key: metrics.get(key) for key in relevant_keys if key in metrics}
    
    def _generate_alert_description(self, rule: AlertRule, metrics: Dict[str, Any]) -> str:
        """G√©n√®re une description d√©taill√©e de l'alerte"""
        
        descriptions = {
            'budget_overrun': f"Le budget actuel ({metrics.get('current_cost', 0):,.0f}‚Ç¨) repr√©sente {metrics.get('budget_ratio', 0):.1%} du budget total.",
            'timeline_delay': f"Progression actuelle: {metrics.get('progress_ratio', 0):.1%}, attendue: {metrics.get('expected_progress_ratio', 0):.1%}",
            'critical_budget': f"CRITIQUE: Budget d√©pass√© de {(metrics.get('budget_ratio', 0) - 1):.1%}",
            'team_velocity_drop': f"V√©locit√© actuelle: {metrics.get('current_velocity', 0):.2f} t√¢ches/jour",
            'quality_degradation': f"Score qualit√© code: {metrics.get('code_quality_score', 0):.1%}",
            'high_risk_detected': f"Score de risque critique: {metrics.get('risk_score', 0):.2f}/10"
        }
        
        return descriptions.get(rule.rule_id, f"Condition d√©clench√©e: {rule.condition}")
    
    async def _detect_ai_anomalies(self, metrics: Dict[str, Any]) -> List[Alert]:
        """D√©tecte des anomalies via IA (algorithmes avanc√©s)"""
        
        alerts = []
        
        # D√©tection d'anomalies temporelles
        if len(self.metrics_history) >= 5:
            anomalies = self._detect_time_series_anomalies(metrics)
            alerts.extend(anomalies)
        
        # D√©tection de patterns inhabituels
        pattern_anomalies = self._detect_pattern_anomalies(metrics)
        alerts.extend(pattern_anomalies)
        
        # Corr√©lations anormales
        correlation_alerts = self._detect_correlation_anomalies(metrics)
        alerts.extend(correlation_alerts)
        
        return alerts
    
    def _detect_time_series_anomalies(self, current_metrics: Dict[str, Any]) -> List[Alert]:
        """D√©tecte les anomalies dans les s√©ries temporelles"""
        
        alerts = []
        
        # Analyse des m√©triques cl√©s sur l'historique
        key_metrics = ['progress_ratio', 'budget_ratio', 'current_velocity', 'code_quality_score']
        
        for metric_name in key_metrics:
            if metric_name not in current_metrics:
                continue
                
            # Extraction de l'historique
            historical_values = [
                entry['metrics'].get(metric_name, 0) 
                for entry in self.metrics_history
                if metric_name in entry['metrics']
            ]
            
            if len(historical_values) < 3:
                continue
            
            current_value = current_metrics[metric_name]
            historical_mean = np.mean(historical_values)
            historical_std = np.std(historical_values)
            
            # D√©tection d'anomalie (> 2 √©carts-types)
            if historical_std > 0:
                z_score = abs(current_value - historical_mean) / historical_std
                
                if z_score > 2.0:
                    alert = Alert(
                        id=f"anomaly_{metric_name}_{datetime.now().timestamp()}",
                        level=AlertLevel.WARNING,
                        category=AlertCategory.PERFORMANCE,
                        title=f"Anomalie d√©tect√©e: {metric_name}",
                        description=f"Valeur inhabituelle pour {metric_name}: {current_value:.3f} (Z-score: {z_score:.2f})",
                        recommended_actions=[
                            "Analyser les causes de cette variation inhabituelle",
                            "V√©rifier s'il s'agit d'une √©volution normale ou d'un probl√®me",
                            "Surveiller de pr√®s cette m√©trique dans les prochaines mesures"
                        ],
                        data_points={
                            'current_value': current_value,
                            'historical_mean': historical_mean,
                            'z_score': z_score,
                            'metric_name': metric_name
                        },
                        confidence=min(0.9, z_score / 3.0),
                        created_at=datetime.now()
                    )
                    alerts.append(alert)
        
        return alerts
    
    def _detect_pattern_anomalies(self, metrics: Dict[str, Any]) -> List[Alert]:
        """D√©tecte des patterns inhabituels dans les m√©triques"""
        
        alerts = []
        
        # Pattern 1: Progression sans d√©penses (suspect)
        if (metrics.get('progress_ratio', 0) > 0.1 and 
            metrics.get('budget_ratio', 0) < 0.05):
            
            alerts.append(Alert(
                id=f"pattern_progress_no_cost_{datetime.now().timestamp()}",
                level=AlertLevel.INFO,
                category=AlertCategory.BUSINESS,
                title="Pattern inhabituel: Progression sans co√ªts",
                description="Le projet progresse mais les co√ªts n'augmentent pas proportionnellement",
                recommended_actions=[
                    "V√©rifier la saisie des co√ªts dans le syst√®me",
                    "S'assurer que tous les co√ªts sont bien comptabilis√©s",
                    "Valider les m√©triques de progression"
                ],
                data_points=metrics,
                confidence=0.7,
                created_at=datetime.now()
            ))
        
        # Pattern 2: Co√ªts √©lev√©s sans progression (probl√©matique)
        if (metrics.get('budget_ratio', 0) > 0.3 and 
            metrics.get('progress_ratio', 0) < 0.1):
            
            alerts.append(Alert(
                id=f"pattern_cost_no_progress_{datetime.now().timestamp()}",
                level=AlertLevel.ERROR,
                category=AlertCategory.BUDGET,
                title="Pattern probl√©matique: Co√ªts sans progression",
                description="Les co√ªts augmentent mais la progression reste faible",
                recommended_actions=[
                    "Analyser l'utilisation des ressources",
                    "Identifier les blocages emp√™chant la progression",
                    "Revoir l'allocation budg√©taire et les priorit√©s"
                ],
                data_points=metrics,
                confidence=0.8,
                created_at=datetime.now()
            ))
        
        return alerts
    
    def _detect_correlation_anomalies(self, metrics: Dict[str, Any]) -> List[Alert]:
        """D√©tecte des corr√©lations anormales entre m√©triques"""
        
        alerts = []
        
        # Corr√©lation attendue: Plus d'√©quipe = plus de v√©locit√©
        team_size = metrics.get('team_size', 0)
        velocity = metrics.get('current_velocity', 0)
        
        if team_size > 5 and velocity < 0.5:
            alerts.append(Alert(
                id=f"correlation_team_velocity_{datetime.now().timestamp()}",
                level=AlertLevel.WARNING,
                category=AlertCategory.TEAM,
                title="Corr√©lation anormale: Grande √©quipe, faible v√©locit√©",
                description=f"√âquipe de {team_size} personnes mais v√©locit√© de seulement {velocity:.2f} t√¢ches/jour",
                recommended_actions=[
                    "Analyser les processus et l'organisation de l'√©quipe",
                    "Identifier les goulots d'√©tranglement",
                    "Am√©liorer la coordination et la communication"
                ],
                data_points={'team_size': team_size, 'velocity': velocity},
                confidence=0.6,
                created_at=datetime.now()
            ))
        
        return alerts
    
    async def _predict_future_issues(self, metrics: Dict[str, Any]) -> List[Alert]:
        """Pr√©dit les probl√®mes futurs bas√©s sur les tendances"""
        
        alerts = []
        
        # Pr√©diction 1: D√©passement budg√©taire imminent
        budget_ratio = metrics.get('budget_ratio', 0)
        progress_ratio = metrics.get('progress_ratio', 0)
        
        if progress_ratio > 0.1:  # √âviter division par z√©ro
            projected_budget_ratio = budget_ratio / progress_ratio
            
            if projected_budget_ratio > 1.2:  # D√©passement pr√©vu de 20%
                alerts.append(Alert(
                    id=f"prediction_budget_overrun_{datetime.now().timestamp()}",
                    level=AlertLevel.WARNING,
                    category=AlertCategory.BUDGET,
                    title="Pr√©diction: D√©passement budg√©taire imminent",
                    description=f"√Ä ce rythme, le budget sera d√©pass√© de {(projected_budget_ratio-1)*100:.1f}%",
                    recommended_actions=[
                        "Revoir imm√©diatement l'allocation budg√©taire",
                        "N√©gocier un budget suppl√©mentaire ou r√©duire le scope",
                        "Optimiser les processus pour r√©duire les co√ªts"
                    ],
                    data_points={
                        'current_budget_ratio': budget_ratio,
                        'projected_budget_ratio': projected_budget_ratio,
                        'overrun_prediction': (projected_budget_ratio - 1) * 100
                    },
                    confidence=0.8,
                    created_at=datetime.now()
                ))
        
        # Pr√©diction 2: Retard de livraison
        time_ratio = metrics.get('time_ratio', 0)
        
        if time_ratio > 0.1 and progress_ratio > 0.1:
            projected_duration_ratio = time_ratio / progress_ratio
            
            if projected_duration_ratio > 1.3:  # Retard pr√©vu de 30%
                alerts.append(Alert(
                    id=f"prediction_timeline_delay_{datetime.now().timestamp()}",
                    level=AlertLevel.WARNING,
                    category=AlertCategory.TIMELINE,
                    title="Pr√©diction: Retard de livraison probable",
                    description=f"√Ä ce rythme, le projet aura {(projected_duration_ratio-1)*100:.1f}% de retard",
                    recommended_actions=[
                        "Acc√©l√©rer le d√©veloppement des fonctionnalit√©s critiques",
                        "Augmenter temporairement les ressources",
                        "N√©gocier un report de deadline avec le client"
                    ],
                    data_points={
                        'time_ratio': time_ratio,
                        'progress_ratio': progress_ratio,
                        'delay_prediction': (projected_duration_ratio - 1) * 100
                    },
                    confidence=0.7,
                    created_at=datetime.now()
                ))
        
        return alerts
    
    def _deduplicate_alerts(self, alerts: List[Alert]) -> List[Alert]:
        """Supprime les alertes en doublon"""
        
        seen_signatures = set()
        unique_alerts = []
        
        for alert in alerts:
            # Signature bas√©e sur cat√©gorie + niveau + mots-cl√©s du titre
            signature = f"{alert.category.value}_{alert.level.value}_{alert.title[:20]}"
            
            if signature not in seen_signatures:
                seen_signatures.add(signature)
                unique_alerts.append(alert)
        
        return unique_alerts
    
    def _update_active_alerts(self, alerts: List[Alert]):
        """Met √† jour les alertes actives"""
        
        # Ajouter les nouvelles alertes
        for alert in alerts:
            self.active_alerts[alert.id] = alert
            self.alerts_history.append(alert)
        
        # Nettoyer les alertes expir√©es
        current_time = datetime.now()
        expired_alerts = [
            alert_id for alert_id, alert in self.active_alerts.items()
            if alert.expires_at and current_time > alert.expires_at
        ]
        
        for alert_id in expired_alerts:
            del self.active_alerts[alert_id]
    
    def get_active_alerts(self, category: Optional[AlertCategory] = None, 
                         level: Optional[AlertLevel] = None) -> List[Alert]:
        """R√©cup√®re les alertes actives avec filtres optionnels"""
        
        alerts = list(self.active_alerts.values())
        
        if category:
            alerts = [a for a in alerts if a.category == category]
        
        if level:
            alerts = [a for a in alerts if a.level == level]
        
        # Trier par niveau de criticit√© et date
        level_priority = {
            AlertLevel.CRITICAL: 0,
            AlertLevel.ERROR: 1, 
            AlertLevel.WARNING: 2,
            AlertLevel.INFO: 3
        }
        
        alerts.sort(key=lambda a: (level_priority[a.level], -a.created_at.timestamp()))
        
        return alerts
    
    def dismiss_alert(self, alert_id: str) -> bool:
        """Marque une alerte comme ferm√©e"""
        
        if alert_id in self.active_alerts:
            self.active_alerts[alert_id].dismissed = True
            del self.active_alerts[alert_id]
            return True
        return False
    
    def get_alert_statistics(self) -> Dict[str, Any]:
        """Retourne des statistiques sur les alertes"""
        
        active_alerts = list(self.active_alerts.values())
        
        stats = {
            'total_active': len(active_alerts),
            'by_level': {level.value: 0 for level in AlertLevel},
            'by_category': {cat.value: 0 for cat in AlertCategory},
            'total_generated_today': 0,
            'resolution_rate': 0.0
        }
        
        # Comptage par niveau et cat√©gorie
        for alert in active_alerts:
            stats['by_level'][alert.level.value] += 1
            stats['by_category'][alert.category.value] += 1
        
        # Alertes g√©n√©r√©es aujourd'hui
        today = datetime.now().date()
        today_alerts = [
            alert for alert in self.alerts_history
            if alert.created_at.date() == today
        ]
        stats['total_generated_today'] = len(today_alerts)
        
        # Taux de r√©solution (alertes ferm√©es vs g√©n√©r√©es)
        if len(self.alerts_history) > 0:
            dismissed_count = len([a for a in self.alerts_history if a.dismissed])
            stats['resolution_rate'] = dismissed_count / len(self.alerts_history)
        
        return stats
    
    def add_custom_rule(self, rule: AlertRule) -> bool:
        """Ajoute une r√®gle d'alerte personnalis√©e"""
        
        try:
            # Validation de la r√®gle
            if not rule.rule_id or not rule.name or not rule.condition:
                return False
            
            # Test de la condition (syntaxe)
            test_metrics = {'test': 1, 'value': 0.5}
            try:
                eval(rule.condition, {"__builtins__": {}}, test_metrics)
            except:
                return False
            
            self.alert_rules[rule.rule_id] = rule
            return True
            
        except Exception:
            return False
    
    def export_alerts_report(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """G√©n√®re un rapport d'alertes pour une p√©riode"""
        
        period_alerts = [
            alert for alert in self.alerts_history
            if start_date <= alert.created_at <= end_date
        ]
        
        return {
            'period': {'start': start_date.isoformat(), 'end': end_date.isoformat()},
            'total_alerts': len(period_alerts),
            'by_level': {
                level.value: len([a for a in period_alerts if a.level == level])
                for level in AlertLevel
            },
            'by_category': {
                cat.value: len([a for a in period_alerts if a.category == cat])
                for cat in AlertCategory
            },
            'top_alerts': [
                {
                    'title': alert.title,
                    'level': alert.level.value,
                    'category': alert.category.value,
                    'created_at': alert.created_at.isoformat(),
                    'confidence': alert.confidence
                }
                for alert in sorted(period_alerts, 
                                  key=lambda a: (AlertLevel.CRITICAL.value == a.level.value, 
                                               -a.confidence))[:10]
            ]
        }


# Instance globale
smart_alert_system = SmartAlertSystem()