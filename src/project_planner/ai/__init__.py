"""
üß† Module IA PlannerIA - Intelligence Artificielle Int√©gr√©e
Hub central pour tous les composants d'IA avanc√©e
"""

# Importation des modules IA principaux
from .predictive_engine import ai_predictor, AIProjectPredictor
from .conversational_assistant import ai_assistant, AIConversationalAssistant
from .smart_alerts import smart_alert_system, SmartAlertSystem
from .gamification_engine import gamification_engine, IntelligentGamificationEngine
from .risk_predictor import ai_risk_predictor, AIRiskPredictor
from .chat_interface import smart_chat, SmartChatInterface
from .budget_optimizer import ai_budget_optimizer, AIBudgetOptimizer
from .crisis_predictor import ai_crisis_predictor, AICrisisPredictor
from .personal_coach import ai_personal_coach, AIPersonalCoach, coach_observe, initialize_personal_coach
from .rag_manager import ai_rag_manager, RAGManagerIntelligent, initialize_rag_manager
from .portfolio_manager import ai_portfolio_manager, AIPortfolioManager, initialize_portfolio_manager

# Imports des classes et enums utiles
from .predictive_engine import ProjectDomain, PredictionResult
from .smart_alerts import AlertLevel, AlertCategory, Alert
from .gamification_engine import ChallengeType, DifficultyLevel, Achievement
from .risk_predictor import RiskCategory, RiskLevel, PredictedRisk
from .chat_interface import ChatMessageType, ChatMode
from .budget_optimizer import BudgetCategory, OptimizationObjective
from .crisis_predictor import CrisisType, CrisisSeverity, CrisisProfile
from .personal_coach import CoachingArea, PersonalityTrait, CoachingStyle
from .rag_manager import DocumentType, SourceReliability, QueryContext
from .portfolio_manager import ProjectStatus, ProjectPriority, ProjectTemplate, ResourceType

# Version du module IA
__version__ = "1.0.0"

# Instances globales disponibles
__all__ = [
    # Instances principales
    'ai_predictor',
    'ai_assistant', 
    'smart_alert_system',
    'gamification_engine',
    'ai_risk_predictor',
    'smart_chat',
    'ai_budget_optimizer',
    'ai_crisis_predictor',
    'ai_personal_coach',
    'ai_rag_manager',
    'ai_portfolio_manager',
    
    # Classes pour instanciation personnalis√©e
    'AIProjectPredictor',
    'AIConversationalAssistant',
    'SmartAlertSystem',
    'IntelligentGamificationEngine', 
    'AIRiskPredictor',
    'SmartChatInterface',
    'AIBudgetOptimizer',
    'AICrisisPredictor',
    'AIPersonalCoach',
    'RAGManagerIntelligent',
    'AIPortfolioManager',
    
    # Enums et types
    'ProjectDomain',
    'AlertLevel', 
    'AlertCategory',
    'ChallengeType',
    'DifficultyLevel',
    'RiskCategory',
    'RiskLevel',
    'ChatMessageType',
    'ChatMode',
    'BudgetCategory',
    'OptimizationObjective',
    'CrisisType',
    'CrisisSeverity',
    'CoachingArea',
    'PersonalityTrait',
    'CoachingStyle',
    'DocumentType',
    'SourceReliability',
    'QueryContext',
    'ProjectStatus',
    'ProjectPriority',
    'ProjectTemplate',
    'ResourceType',
    
    # Classes de donn√©es
    'PredictionResult',
    'Alert',
    'Achievement',
    'PredictedRisk',
    'CrisisProfile',
    
    # Fonctions utiles
    'coach_observe',
    'initialize_personal_coach',
    'initialize_rag_manager',
    'initialize_portfolio_manager'
]

# M√©tadonn√©es du module
AI_MODULE_INFO = {
    "name": "PlannerIA AI Engine",
    "version": __version__,
    "description": "Intelligence artificielle avanc√©e pour gestion de projets",
    "components": {
        "portfolio_manager": "Gestionnaire intelligent de portefeuille multi-projets",
        "predictive_engine": "Pr√©dictions et patterns de projets",
        "conversational_assistant": "Assistant IA conversationnel", 
        "smart_alerts": "Alertes intelligentes avec d√©tection pr√©coce",
        "gamification_engine": "Gamification adaptative avec d√©fis IA",
        "risk_predictor": "Analyse pr√©dictive des risques avec ML",
        "chat_interface": "Interface chat intelligente", 
        "budget_optimizer": "Optimisation budg√©taire avec allocation IA",
        "crisis_predictor": "Pr√©dicteur de crises avec signaux faibles",
        "personal_coach": "Coach personnel IA adaptatif et transversal",
        "rag_manager": "Gestionnaire RAG intelligent avec auto-enrichissement"
    },
    "capabilities": [
        "Gestion intelligente de portefeuille multi-projets avec optimisation",
        "Pr√©diction de dur√©e et co√ªt avec ML",
        "Analyse conversationnelle en langage naturel",
        "D√©tection d'anomalies et alertes pr√©coces", 
        "D√©fis gamifi√©s adaptatifs personnalis√©s",
        "Pr√©diction de risques avec patterns",
        "Chat contextuel multimodal",
        "Optimisation budg√©taire avec contraintes",
        "D√©tection de signaux faibles et pr√©diction de crises",
        "Coaching personnalis√© adaptatif avec analyse comportementale",
        "Gestion documentaire intelligente avec RAG et auto-enrichissement"
    ]
}

def get_ai_status():
    """Retourne le statut de tous les modules IA"""
    
    status = {
        "module_info": AI_MODULE_INFO,
        "components_status": {},
        "overall_health": "healthy"
    }
    
    # V√©rification de chaque composant
    components = {
        "portfolio_manager": ai_portfolio_manager,
        "predictive_engine": ai_predictor,
        "conversational_assistant": ai_assistant,
        "smart_alerts": smart_alert_system, 
        "gamification_engine": gamification_engine,
        "risk_predictor": ai_risk_predictor,
        "chat_interface": smart_chat,
        "budget_optimizer": ai_budget_optimizer,
        "crisis_predictor": ai_crisis_predictor,
        "personal_coach": ai_personal_coach,
        "rag_manager": ai_rag_manager
    }
    
    for name, component in components.items():
        try:
            # Test basique de sanit√© du composant
            component_status = {
                "loaded": True,
                "class": component.__class__.__name__,
                "methods": len([method for method in dir(component) if not method.startswith('_')]),
                "status": "operational"
            }
            
            # Tests sp√©cifiques par composant
            if hasattr(component, 'trained'):
                component_status["trained"] = getattr(component, 'trained', False)
                
            if hasattr(component, 'patterns_db'):
                component_status["patterns_loaded"] = len(getattr(component, 'patterns_db', {}))
                
            if hasattr(component, 'sessions'):
                component_status["active_sessions"] = len(getattr(component, 'sessions', {}))
                
        except Exception as e:
            component_status = {
                "loaded": False,
                "status": "error",
                "error": str(e)
            }
            status["overall_health"] = "degraded"
        
        status["components_status"][name] = component_status
    
    return status

def initialize_ai_system():
    """Initialise le syst√®me IA complet"""
    
    print("[AI] Initialisation du syst√®me IA PlannerIA...")
    
    initialization_results = {
        "portfolio_manager": False,
        "predictive_engine": False,
        "conversational_assistant": False, 
        "smart_alerts": False,
        "gamification_engine": False,
        "risk_predictor": False,
        "chat_interface": False,
        "budget_optimizer": False,
        "crisis_predictor": False,
        "personal_coach": False,
        "rag_manager": False
    }
    
    try:
        # Initialisation du Portfolio Manager
        print("[PORTFOLIO] Chargement du gestionnaire de portefeuille...")
        if hasattr(ai_portfolio_manager, 'projects'):
            initialization_results["portfolio_manager"] = True
            print("  [OK] Portfolio Manager: Syst√®me multi-projets initialis√©")
        
        # Initialisation du moteur pr√©dictif
        print("[PREDICT] Chargement du moteur pr√©dictif...")
        if hasattr(ai_predictor, 'patterns_db'):
            initialization_results["predictive_engine"] = True
            print("  [OK] Moteur pr√©dictif: Patterns charg√©s")
        
        # Initialisation de l'assistant conversationnel
        print("[ASSISTANT] Chargement de l'assistant conversationnel...")
        if hasattr(ai_assistant, 'intent_patterns'):
            initialization_results["conversational_assistant"] = True
            print("  [OK] Assistant conversationnel: Patterns d'intention charg√©s")
        
        # Initialisation du syst√®me d'alertes
        print("[ALERTS] Chargement du syst√®me d'alertes...")
        if hasattr(smart_alert_system, 'alert_rules'):
            initialization_results["smart_alerts"] = True
            print(f"  [OK] Alertes intelligentes: {len(smart_alert_system.alert_rules)} r√®gles charg√©es")
        
        # Initialisation du moteur de gamification
        print("[GAMIFY] Chargement du moteur de gamification...")
        if hasattr(gamification_engine, 'challenges_pool'):
            challenges_count = sum(len(challenges) for challenges in gamification_engine.challenges_pool.values())
            initialization_results["gamification_engine"] = True
            print(f"  [OK] Gamification: {challenges_count} d√©fis disponibles")
        
        # Initialisation du pr√©dicteur de risques
        print("[RISK] Chargement du pr√©dicteur de risques...")
        if hasattr(ai_risk_predictor, 'models') and ai_risk_predictor.trained:
            initialization_results["risk_predictor"] = True
            print("  [OK] Pr√©dicteur de risques: Mod√®les ML entra√Æn√©s")
        
        # Initialisation de l'interface chat
        print("[CHAT] Chargement de l'interface chat...")
        if hasattr(smart_chat, 'quick_actions'):
            initialization_results["chat_interface"] = True
            print(f"  [OK] Chat intelligent: {len(smart_chat.quick_actions)} actions rapides")
        
        # Initialisation de l'optimiseur budg√©taire
        print("[BUDGET] Chargement de l'optimiseur budg√©taire...")
        if hasattr(ai_budget_optimizer, 'optimization_models'):
            initialization_results["budget_optimizer"] = True
            print("  [OK] Optimiseur budg√©taire: Mod√®les d'optimisation charg√©s")
        
        # Initialisation du pr√©dicteur de crises
        print("[CRISIS] Chargement du pr√©dicteur de crises...")
        if hasattr(ai_crisis_predictor, 'models') and ai_crisis_predictor.trained:
            initialization_results["crisis_predictor"] = True
            print("  [OK] Pr√©dicteur de crises: Mod√®les ML et patterns charg√©s")
        
        # Initialisation du coach personnel
        print("[COACH] Chargement du coach personnel...")
        if hasattr(ai_personal_coach, 'user_profiles'):
            initialization_results["personal_coach"] = True
            print(f"  [OK] Coach personnel: Syst√®me d'observation et {len(ai_personal_coach.user_profiles)} profils charg√©s")
        
        # Initialisation du RAG manager
        print("[RAG] Chargement du gestionnaire RAG...")
        if hasattr(ai_rag_manager, 'documents') and hasattr(ai_rag_manager, 'chunks'):
            initialization_results["rag_manager"] = True
            print(f"  [OK] RAG Manager: {len(ai_rag_manager.documents)} documents, {len(ai_rag_manager.chunks)} chunks index√©s")
        
        success_count = sum(initialization_results.values())
        total_count = len(initialization_results)
        
        print(f"\n[RESULT] Initialisation termin√©e: {success_count}/{total_count} modules op√©rationnels")
        
        if success_count == total_count:
            print("[SUCCESS] Syst√®me IA PlannerIA enti√®rement op√©rationnel !")
            return True
        else:
            print(f"[WARNING] Syst√®me partiellement op√©rationnel ({success_count}/{total_count} modules)")
            return False
            
    except Exception as e:
        print(f"[ERROR] Erreur lors de l'initialisation: {str(e)}")
        return False

def get_ai_capabilities_summary():
    """Retourne un r√©sum√© des capacit√©s IA disponibles"""
    
    return {
        "üîÆ Pr√©diction Intelligente": {
            "description": "Pr√©dictions de dur√©e, co√ªt et succ√®s avec IA",
            "features": [
                "Patterns de projets par domaine",
                "Pr√©dictions ML avec intervalles de confiance", 
                "Recommandations contextuelles",
                "Projets similaires et benchmarks"
            ]
        },
        "ü§ñ Assistant Conversationnel": {
            "description": "Assistant IA en langage naturel",
            "features": [
                "Compr√©hension d'intentions avanc√©e",
                "Analyse contextuelle de projets",
                "Recommandations personnalis√©es",
                "Support multilingue"
            ]
        },
        "üö® Alertes Intelligentes": {
            "description": "D√©tection pr√©coce et alertes contextuelles",
            "features": [
                "D√©tection d'anomalies en temps r√©el",
                "Pr√©diction de probl√®mes futurs",
                "Alertes personnalis√©es par r√®gles",
                "Corr√©lations entre m√©triques"
            ]
        },
        "üéÆ Gamification Adaptative": {
            "description": "D√©fis personnalis√©s et progression gamifi√©e",
            "features": [
                "D√©fis adaptatifs par niveau",
                "Syst√®me d'achievements √©volutif",
                "Coach IA personnel",
                "Progression et classements"
            ]
        },
        "‚ö†Ô∏è Analyse Pr√©dictive des Risques": {
            "description": "ML avanc√© pour pr√©diction et mitigation des risques",
            "features": [
                "Mod√®les ML entrain√©s sur 1000+ projets",
                "D√©tection de patterns de risque",
                "Strat√©gies de mitigation automatiques",
                "Corr√©lations et cascades de risques"
            ]
        },
        "üí¨ Chat Intelligent": {
            "description": "Interface conversationnelle contextuelle",
            "features": [
                "Modes sp√©cialis√©s par contexte",
                "Actions rapides intelligentes",
                "Personnalisation des r√©ponses",
                "Suggestions contextuelles"
            ]
        },
        "üí∞ Optimisation Budg√©taire": {
            "description": "Allocation intelligente et optimisation des co√ªts",
            "features": [
                "Optimisation math√©matique avec contraintes",
                "Benchmarks industrie par domaine",
                "Strat√©gies d'√©conomies personnalis√©es",
                "Analyse ROI multi-crit√®res"
            ]
        }
    }

# Initialisation automatique √† l'import
_ai_initialized = False

def ensure_ai_initialized():
    """S'assure que le syst√®me IA est initialis√©"""
    global _ai_initialized
    
    if not _ai_initialized:
        _ai_initialized = initialize_ai_system()
    
    return _ai_initialized

# Initialisation compl√®te pour pr√©sentation
ensure_ai_initialized()