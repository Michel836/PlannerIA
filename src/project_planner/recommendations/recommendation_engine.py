"""
üß† Moteur de Recommandations Intelligentes PlannerIA
====================================================

Ce module impl√©mente un syst√®me de recommandations avanc√© utilisant l'apprentissage automatique
pour analyser les patterns de projets r√©ussis et proposer des optimisations intelligentes.

Fonctionnalit√©s principales:
- üéØ Analyse pr√©dictive bas√©e sur des projets similaires
- üìä Scoring de confiance avec m√©triques d'impact
- üîÑ Apprentissage continu des pr√©f√©rences utilisateur  
- üìà Base de donn√©es SQLite pour persistence des patterns
- ‚ö° G√©n√©ration temps r√©el de recommandations contextuelles

Architecture:
- SmartRecommendationEngine: Moteur principal d'analyse
- Recommendation: Mod√®le de donn√©es pour une recommandation
- RecommendationType: Types de recommandations (8 cat√©gories)
- RecommendationPriority: Niveaux de priorit√© (LOW √† CRITICAL)

Exemple d'usage:
    engine = get_recommendation_engine()
    recommendations = engine.generate_recommendations({
        'budget': 50000,
        'duration': 120,
        'team_size': 5,
        'complexity': 'high'
    })
    
    for rec in recommendations:
        print(f"üí° {rec.title}: {rec.description}")
        print(f"   Confiance: {rec.confidence:.0%} | Impact: {rec.impact_score:.1f}")

Auteur: PlannerIA AI System
Version: 2.0.0
"""

import time
import json
import logging
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import sqlite3
from collections import defaultdict
import pickle

logger = logging.getLogger(__name__)

class RecommendationType(Enum):
    """
    üéØ Types de Recommandations Intelligentes
    
    Enum√©ration des diff√©rents types de recommandations que le moteur IA peut g√©n√©rer:
    - OPTIMIZATION: Am√©liorations g√©n√©rales de performance et efficacit√©
    - TEAM_STRUCTURE: Suggestions sur la composition et organisation de l'√©quipe
    - RISK_MITIGATION: Strat√©gies de r√©duction des risques identifi√©s
    - BUDGET_ADJUSTMENT: Optimisations budg√©taires et allocation des co√ªts
    - TIMELINE_IMPROVEMENT: Acc√©l√©ration du planning et r√©duction des d√©lais
    - TECHNOLOGY_CHOICE: S√©lection d'outils et technologies appropri√©s
    - RESOURCE_ALLOCATION: Distribution optimale des ressources humaines/mat√©rielles
    - QUALITY_ASSURANCE: Mesures de qualit√© et processus de validation
    """
    OPTIMIZATION = "optimization"            # üöÄ Optimisation g√©n√©rale
    TEAM_STRUCTURE = "team_structure"        # üë• Structure √©quipe
    RISK_MITIGATION = "risk_mitigation"      # ‚ö†Ô∏è Mitigation risques
    BUDGET_ADJUSTMENT = "budget_adjustment"  # üí∞ Ajustement budget
    TIMELINE_IMPROVEMENT = "timeline_improvement"  # ‚è∞ Am√©lioration planning
    TECHNOLOGY_CHOICE = "technology_choice"  # üîß Choix technologique
    RESOURCE_ALLOCATION = "resource_allocation"  # üìä Allocation ressources
    QUALITY_ASSURANCE = "quality_assurance"  # ‚úÖ Assurance qualit√©

class RecommendationPriority(Enum):
    """
    üìä Niveaux de Priorit√© des Recommandations
    
    Classification par urgence et impact business:
    - LOW (1): Am√©liorations optionnelles, impl√©mentation flexible
    - MEDIUM (2): Recommandations b√©n√©fiques, √† planifier dans les sprints
    - HIGH (3): Optimisations importantes, impl√©mentation recommand√©e rapidement  
    - CRITICAL (4): Actions urgentes, risque d'impact n√©gatif si ignor√©es
    
    Le score num√©rique permet le tri automatique par ordre de priorit√©.
    """
    LOW = 1        # üü¢ Optionnel - peut attendre
    MEDIUM = 2     # üü° B√©n√©fique - √† planifier 
    HIGH = 3       # üü† Important - action rapide
    CRITICAL = 4   # üî¥ Urgent - action imm√©diate

@dataclass
class Recommendation:
    """
    üí° Mod√®le de Donn√©es d'une Recommandation Intelligente
    
    Structure compl√®te d'une recommandation g√©n√©r√©e par l'IA avec toutes les m√©tadonn√©es
    n√©cessaires pour l'√©valuation, la pr√©sentation et l'impl√©mentation.
    
    Attributs:
        id: Identifiant unique de la recommandation (UUID)
        type: Type de recommandation (voir RecommendationType)
        priority: Niveau de priorit√© (voir RecommendationPriority)  
        title: Titre court et explicite (max 60 chars)
        description: Description d√©taill√©e de la recommandation
        rationale: Justification IA bas√©e sur l'analyse des donn√©es
        impact_score: Score d'impact business (0.0 √† 1.0)
        confidence: Niveau de confiance IA (0.0 √† 1.0)
        implementation_time: Temps d'impl√©mentation estim√© en minutes
        cost_savings: √âconomies estim√©es en euros (optionnel)
        time_savings: Gain de temps estim√© en heures (optionnel) 
        similar_projects: Liste d'IDs de projets similaires analys√©s
        action_data: Donn√©es suppl√©mentaires pour l'impl√©mentation
    
    Exemple:
        rec = Recommendation(
            id="opt_001",
            type=RecommendationType.OPTIMIZATION,
            priority=RecommendationPriority.HIGH,
            title="Parall√©liser les phases de d√©veloppement",
            description="R√©organiser le planning pour ex√©cuter...",
            rationale="L'analyse de 15 projets similaires montre...",
            impact_score=0.85,
            confidence=0.92,
            implementation_time=120
        )
    """
    id: str                                    # üÜî Identifiant unique
    type: RecommendationType                   # üéØ Type de recommandation  
    priority: RecommendationPriority           # üìä Niveau de priorit√©
    title: str                                # üí¨ Titre court et explicite
    description: str                          # üìÑ Description d√©taill√©e
    rationale: str                           # üß† Justification IA
    impact_score: float                      # üìà Score d'impact (0.0-1.0)
    confidence: float                        # üéØ Confiance IA (0.0-1.0)
    implementation_time: int                 # ‚è±Ô∏è Temps impl√©mentation (min)
    cost_savings: Optional[float] = None     # üí∞ √âconomies estim√©es (‚Ç¨)
    time_savings: Optional[float] = None     # ‚è∞ Gain de temps (heures)
    similar_projects: List[str] = None       # üìö Projets similaires analys√©s
    action_data: Dict[str, Any] = None       # üîß Donn√©es d'impl√©mentation
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()
        if self.similar_projects is None:
            self.similar_projects = []
        if self.action_data is None:
            self.action_data = {}
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            **asdict(self),
            'type': self.type.value,
            'priority': self.priority.value,
            'timestamp': self.timestamp.isoformat()
        }

class SmartRecommendationEngine:
    """Moteur de recommandations intelligentes avec apprentissage ML"""
    
    def __init__(self, db_path: str = "data/recommendations.db"):
        self.db_path = db_path
        self.project_patterns = {}
        self.success_patterns = {}
        self.recommendation_cache = {}
        self.ml_models = {}
        
        # Statistiques
        self.stats = {
            'recommendations_generated': 0,
            'recommendations_applied': 0,
            'accuracy_score': 0.0,
            'user_satisfaction': 0.0,
            'last_update': None
        }
        
        self._initialize_database()
        self._load_patterns()
        self._train_models()
        
    def _initialize_database(self):
        """Initialiser la base de donn√©es des recommandations"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Table des projets analys√©s
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS analyzed_projects (
                    id TEXT PRIMARY KEY,
                    project_data TEXT,
                    success_score REAL,
                    completion_time REAL,
                    budget_efficiency REAL,
                    quality_score REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                # Table des recommandations
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS recommendations (
                    id TEXT PRIMARY KEY,
                    project_id TEXT,
                    recommendation_data TEXT,
                    applied BOOLEAN DEFAULT FALSE,
                    impact_measured REAL,
                    user_feedback INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                # Table des patterns d'industrie
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS industry_patterns (
                    id TEXT PRIMARY KEY,
                    industry TEXT,
                    pattern_data TEXT,
                    success_rate REAL,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                conn.commit()
                logger.info("‚úÖ Base de donn√©es recommandations initialis√©e")
                
        except Exception as e:
            logger.error(f"Erreur initialisation DB recommandations: {e}")
            
    def _load_patterns(self):
        """Charger les patterns de projets r√©ussis"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Charger les projets r√©ussis
                cursor.execute("""
                SELECT project_data, success_score 
                FROM analyzed_projects 
                WHERE success_score > 0.7
                ORDER BY success_score DESC
                LIMIT 100
                """)
                
                for row in cursor.fetchall():
                    try:
                        project_data = json.loads(row[0])
                        success_score = row[1]
                        
                        # Extraire les patterns cl√©s
                        self._extract_success_patterns(project_data, success_score)
                        
                    except Exception as e:
                        logger.error(f"Erreur extraction pattern: {e}")
                        continue
                        
            logger.info(f"üìä Patterns charg√©s: {len(self.success_patterns)} patterns de succ√®s")
            
        except Exception as e:
            logger.error(f"Erreur chargement patterns: {e}")
            
    def _extract_success_patterns(self, project_data: Dict[str, Any], success_score: float):
        """Extraire les patterns de succ√®s d'un projet"""
        
        # Pattern par type de projet
        project_type = project_data.get('type', 'unknown')
        if project_type not in self.success_patterns:
            self.success_patterns[project_type] = {
                'avg_duration': [],
                'avg_budget': [],
                'team_sizes': [],
                'technologies': defaultdict(int),
                'success_factors': []
            }
        
        pattern = self.success_patterns[project_type]
        
        # M√©triques quantitatives
        if 'duration' in project_data:
            pattern['avg_duration'].append(project_data['duration'])
        if 'budget' in project_data:
            pattern['avg_budget'].append(project_data['budget'])
        if 'team_size' in project_data:
            pattern['team_sizes'].append(project_data['team_size'])
            
        # Technologies utilis√©es
        if 'technologies' in project_data:
            for tech in project_data['technologies']:
                pattern['technologies'][tech] += 1
                
        # Facteurs de succ√®s
        if 'critical_path' in project_data:
            pattern['success_factors'].append({
                'factor': 'critical_path_optimization',
                'value': len(project_data['critical_path']),
                'score': success_score
            })
            
    def _train_models(self):
        """Entra√Æner les mod√®les ML pour les recommandations"""
        try:
            # Mod√®le simple bas√© sur les patterns (simulation ML)
            self.ml_models = {
                'timeline_predictor': self._create_timeline_model(),
                'budget_optimizer': self._create_budget_model(),
                'risk_assessor': self._create_risk_model(),
                'team_recommender': self._create_team_model()
            }
            
            logger.info("ü§ñ Mod√®les ML entra√Æn√©s pour recommandations")
            
        except Exception as e:
            logger.error(f"Erreur entra√Ænement mod√®les: {e}")
            
    def _create_timeline_model(self) -> Dict[str, Any]:
        """Cr√©er un mod√®le pr√©dictif pour les d√©lais"""
        return {
            'type': 'timeline_prediction',
            'accuracy': 0.85,
            'patterns': {
                'web_app': {'avg_days': 45, 'variance': 15},
                'mobile_app': {'avg_days': 60, 'variance': 20},
                'ai_project': {'avg_days': 90, 'variance': 30},
                'default': {'avg_days': 50, 'variance': 20}
            }
        }
        
    def _create_budget_model(self) -> Dict[str, Any]:
        """Cr√©er un mod√®le d'optimisation budg√©taire"""
        return {
            'type': 'budget_optimization',
            'accuracy': 0.78,
            'cost_factors': {
                'team_size_multiplier': 1.5,
                'complexity_multiplier': 1.8,
                'technology_risk_multiplier': 1.2,
                'timeline_pressure_multiplier': 1.4
            }
        }
        
    def _create_risk_model(self) -> Dict[str, Any]:
        """Cr√©er un mod√®le d'√©valuation des risques"""
        return {
            'type': 'risk_assessment',
            'accuracy': 0.82,
            'risk_indicators': {
                'tight_timeline': 0.7,
                'new_technology': 0.6,
                'large_team': 0.5,
                'complex_requirements': 0.8,
                'external_dependencies': 0.65
            }
        }
        
    def _create_team_model(self) -> Dict[str, Any]:
        """Cr√©er un mod√®le de recommandation d'√©quipe"""
        return {
            'type': 'team_optimization',
            'accuracy': 0.75,
            'optimal_sizes': {
                'web_app': {'min': 3, 'max': 7, 'optimal': 5},
                'mobile_app': {'min': 2, 'max': 6, 'optimal': 4},
                'ai_project': {'min': 4, 'max': 10, 'optimal': 6},
                'default': {'min': 3, 'max': 8, 'optimal': 5}
            }
        }
        
    def generate_recommendations(self, project_data: Dict[str, Any]) -> List[Recommendation]:
        """G√©n√©rer des recommandations intelligentes pour un projet"""
        
        recommendations = []
        project_type = self._detect_project_type(project_data)
        
        try:
            # Recommandations d'optimisation timeline
            timeline_recs = self._generate_timeline_recommendations(project_data, project_type)
            recommendations.extend(timeline_recs)
            
            # Recommandations budg√©taires
            budget_recs = self._generate_budget_recommendations(project_data, project_type)
            recommendations.extend(budget_recs)
            
            # Recommandations d'√©quipe
            team_recs = self._generate_team_recommendations(project_data, project_type)
            recommendations.extend(team_recs)
            
            # Recommandations de risques
            risk_recs = self._generate_risk_recommendations(project_data, project_type)
            recommendations.extend(risk_recs)
            
            # Recommandations technologiques
            tech_recs = self._generate_technology_recommendations(project_data, project_type)
            recommendations.extend(tech_recs)
            
            # Trier par priorit√© et impact
            recommendations.sort(key=lambda r: (r.priority.value, r.impact_score), reverse=True)
            
            # Mettre √† jour les statistiques
            self.stats['recommendations_generated'] += len(recommendations)
            self.stats['last_update'] = datetime.now()
            
            logger.info(f"‚ú® {len(recommendations)} recommandations g√©n√©r√©es pour projet {project_type}")
            
            return recommendations[:10]  # Top 10
            
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration recommandations: {e}")
            return []
            
    def _detect_project_type(self, project_data: Dict[str, Any]) -> str:
        """D√©tecter le type de projet bas√© sur les donn√©es"""
        
        description = project_data.get('description', '').lower()
        
        # Patterns de d√©tection
        if any(word in description for word in ['web', 'site', 'plateforme', 'application web']):
            return 'web_app'
        elif any(word in description for word in ['mobile', 'app', 'ios', 'android']):
            return 'mobile_app'
        elif any(word in description for word in ['ia', 'ai', 'intelligence', 'machine learning', 'ml']):
            return 'ai_project'
        elif any(word in description for word in ['e-commerce', 'boutique', 'vente']):
            return 'ecommerce'
        elif any(word in description for word in ['fintech', 'finance', 'banque', 'paiement']):
            return 'fintech'
        else:
            return 'default'
            
    def _generate_timeline_recommendations(self, project_data: Dict[str, Any], project_type: str) -> List[Recommendation]:
        """G√©n√©rer des recommandations d'optimisation timeline"""
        
        recommendations = []
        
        try:
            current_duration = project_data.get('estimated_duration', 0)
            model = self.ml_models['timeline_predictor']
            pattern = model['patterns'].get(project_type, model['patterns']['default'])
            
            optimal_duration = pattern['avg_days']
            
            if current_duration > optimal_duration * 1.3:  # 30% plus long que optimal
                rec = Recommendation(
                    id=f"timeline_opt_{int(time.time())}",
                    type=RecommendationType.TIMELINE_IMPROVEMENT,
                    priority=RecommendationPriority.HIGH,
                    title="Optimisation de la timeline d√©tect√©e",
                    description=f"Votre projet pourrait √™tre r√©alis√© en {optimal_duration} jours au lieu de {current_duration}",
                    rationale=f"Analyse de {len(self.success_patterns.get(project_type, {}).get('avg_duration', []))} projets similaires r√©ussis",
                    impact_score=0.8,
                    confidence=model['accuracy'],
                    implementation_time=30,
                    time_savings=current_duration - optimal_duration,
                    action_data={
                        'suggested_duration': optimal_duration,
                        'optimization_areas': ['critical_path', 'parallel_tasks', 'resource_allocation']
                    }
                )
                recommendations.append(rec)
                
            return recommendations
            
        except Exception as e:
            logger.error(f"Erreur recommandations timeline: {e}")
            return []
            
    def _generate_budget_recommendations(self, project_data: Dict[str, Any], project_type: str) -> List[Recommendation]:
        """G√©n√©rer des recommandations budg√©taires"""
        
        recommendations = []
        
        try:
            current_budget = project_data.get('estimated_budget', 0)
            model = self.ml_models['budget_optimizer']
            
            if project_type in self.success_patterns:
                pattern = self.success_patterns[project_type]
                if pattern['avg_budget']:
                    optimal_budget = np.mean(pattern['avg_budget'])
                    
                    if current_budget > optimal_budget * 1.2:  # 20% plus cher
                        rec = Recommendation(
                            id=f"budget_opt_{int(time.time())}",
                            type=RecommendationType.BUDGET_ADJUSTMENT,
                            priority=RecommendationPriority.MEDIUM,
                            title="Opportunit√© d'optimisation budg√©taire",
                            description=f"Budget optimis√© sugg√©r√©: {optimal_budget:,.0f}‚Ç¨ (√©conomie: {current_budget - optimal_budget:,.0f}‚Ç¨)",
                            rationale="Bas√© sur l'analyse de projets similaires r√©ussis",
                            impact_score=0.7,
                            confidence=model['accuracy'],
                            implementation_time=45,
                            cost_savings=current_budget - optimal_budget,
                            action_data={
                                'suggested_budget': optimal_budget,
                                'savings_areas': ['team_optimization', 'technology_choices', 'scope_refinement']
                            }
                        )
                        recommendations.append(rec)
                        
            return recommendations
            
        except Exception as e:
            logger.error(f"Erreur recommandations budget: {e}")
            return []
            
    def _generate_team_recommendations(self, project_data: Dict[str, Any], project_type: str) -> List[Recommendation]:
        """G√©n√©rer des recommandations d'√©quipe"""
        
        recommendations = []
        
        try:
            model = self.ml_models['team_recommender']
            team_config = model['optimal_sizes'].get(project_type, model['optimal_sizes']['default'])
            
            current_team_size = project_data.get('team_size', 0)
            optimal_size = team_config['optimal']
            
            if abs(current_team_size - optimal_size) >= 2:
                if current_team_size > optimal_size:
                    title = "√âquipe potentiellement surdimensionn√©e"
                    desc = f"Taille optimale sugg√©r√©e: {optimal_size} membres (actuelle: {current_team_size})"
                    priority = RecommendationPriority.MEDIUM
                else:
                    title = "√âquipe potentiellement sous-dimensionn√©e"
                    desc = f"Taille optimale sugg√©r√©e: {optimal_size} membres (actuelle: {current_team_size})"
                    priority = RecommendationPriority.HIGH
                    
                rec = Recommendation(
                    id=f"team_opt_{int(time.time())}",
                    type=RecommendationType.TEAM_STRUCTURE,
                    priority=priority,
                    title=title,
                    description=desc,
                    rationale=f"Optimisation bas√©e sur {len(self.success_patterns.get(project_type, {}).get('team_sizes', []))} projets r√©ussis",
                    impact_score=0.65,
                    confidence=model['accuracy'],
                    implementation_time=60,
                    action_data={
                        'optimal_team_size': optimal_size,
                        'current_team_size': current_team_size,
                        'recommended_roles': self._get_recommended_roles(project_type, optimal_size)
                    }
                )
                recommendations.append(rec)
                
            return recommendations
            
        except Exception as e:
            logger.error(f"Erreur recommandations √©quipe: {e}")
            return []
            
    def _generate_risk_recommendations(self, project_data: Dict[str, Any], project_type: str) -> List[Recommendation]:
        """G√©n√©rer des recommandations de mitigation des risques"""
        
        recommendations = []
        
        try:
            model = self.ml_models['risk_assessor']
            risk_indicators = model['risk_indicators']
            
            detected_risks = []
            
            # Analyser les indicateurs de risque
            timeline = project_data.get('estimated_duration', 0)
            if timeline < 30:  # Moins de 30 jours = timeline serr√©e
                detected_risks.append(('tight_timeline', risk_indicators['tight_timeline']))
                
            technologies = project_data.get('technologies', [])
            emerging_techs = ['AI', 'Blockchain', 'VR', 'AR', 'IoT']
            if any(tech in str(technologies) for tech in emerging_techs):
                detected_risks.append(('new_technology', risk_indicators['new_technology']))
                
            team_size = project_data.get('team_size', 0)
            if team_size > 8:
                detected_risks.append(('large_team', risk_indicators['large_team']))
                
            # Cr√©er des recommandations pour les risques d√©tect√©s
            for risk_type, risk_score in detected_risks:
                if risk_score > 0.5:  # Risque significatif
                    rec = Recommendation(
                        id=f"risk_mit_{risk_type}_{int(time.time())}",
                        type=RecommendationType.RISK_MITIGATION,
                        priority=RecommendationPriority.HIGH if risk_score > 0.7 else RecommendationPriority.MEDIUM,
                        title=f"Mitigation recommand√©e: {risk_type.replace('_', ' ').title()}",
                        description=self._get_risk_mitigation_description(risk_type),
                        rationale=f"Risque d√©tect√© avec score: {risk_score:.0%}",
                        impact_score=risk_score,
                        confidence=model['accuracy'],
                        implementation_time=90,
                        action_data={
                            'risk_type': risk_type,
                            'risk_score': risk_score,
                            'mitigation_actions': self._get_mitigation_actions(risk_type)
                        }
                    )
                    recommendations.append(rec)
                    
            return recommendations
            
        except Exception as e:
            logger.error(f"Erreur recommandations risques: {e}")
            return []
            
    def _generate_technology_recommendations(self, project_data: Dict[str, Any], project_type: str) -> List[Recommendation]:
        """G√©n√©rer des recommandations technologiques"""
        
        recommendations = []
        
        try:
            if project_type in self.success_patterns:
                pattern = self.success_patterns[project_type]
                if pattern['technologies']:
                    # Technologies les plus utilis√©es dans les projets r√©ussis
                    top_techs = sorted(pattern['technologies'].items(), key=lambda x: x[1], reverse=True)[:3]
                    
                    current_techs = project_data.get('technologies', [])
                    recommended_techs = [tech for tech, count in top_techs if tech not in str(current_techs)]
                    
                    if recommended_techs:
                        rec = Recommendation(
                            id=f"tech_rec_{int(time.time())}",
                            type=RecommendationType.TECHNOLOGY_CHOICE,
                            priority=RecommendationPriority.LOW,
                            title="Technologies recommand√©es pour ce type de projet",
                            description=f"Consid√©rez: {', '.join(recommended_techs[:2])}",
                            rationale="Bas√© sur les technologies les plus utilis√©es dans les projets similaires r√©ussis",
                            impact_score=0.5,
                            confidence=0.7,
                            implementation_time=120,
                            action_data={
                                'recommended_technologies': recommended_techs,
                                'success_usage': {tech: count for tech, count in top_techs}
                            }
                        )
                        recommendations.append(rec)
                        
            return recommendations
            
        except Exception as e:
            logger.error(f"Erreur recommandations technologiques: {e}")
            return []
            
    def _get_recommended_roles(self, project_type: str, team_size: int) -> List[str]:
        """Obtenir les r√¥les recommand√©s pour un type de projet"""
        
        role_templates = {
            'web_app': ['Product Owner', 'Frontend Developer', 'Backend Developer', 'UX/UI Designer', 'QA Engineer'],
            'mobile_app': ['Product Owner', 'Mobile Developer', 'Backend Developer', 'UI Designer', 'QA Engineer'],
            'ai_project': ['Data Scientist', 'ML Engineer', 'Backend Developer', 'DevOps', 'Product Owner', 'Data Engineer'],
            'default': ['Project Manager', 'Developer', 'Designer', 'QA Engineer']
        }
        
        roles = role_templates.get(project_type, role_templates['default'])
        return roles[:team_size]
        
    def _get_risk_mitigation_description(self, risk_type: str) -> str:
        """Obtenir la description de mitigation pour un type de risque"""
        
        descriptions = {
            'tight_timeline': "Impl√©mentez des sprints courts et priorisez les fonctionnalit√©s critiques",
            'new_technology': "Planifiez des phases de prototypage et formation √©quipe",
            'large_team': "Structurez en sous-√©quipes avec leads techniques et communication renforc√©e",
            'complex_requirements': "D√©composez en modules plus petits avec validations fr√©quentes",
            'external_dependencies': "Cr√©ez des plans de contingence et interfaces de fallback"
        }
        
        return descriptions.get(risk_type, "Surveillez ce risque de pr√®s et planifiez des actions pr√©ventives")
        
    def _get_mitigation_actions(self, risk_type: str) -> List[str]:
        """Obtenir les actions de mitigation sp√©cifiques"""
        
        actions = {
            'tight_timeline': [
                "R√©duire le scope aux fonctionnalit√©s essentielles",
                "Parall√©liser les t√¢ches non-d√©pendantes",
                "Augmenter temporairement l'√©quipe",
                "Impl√©menter des prototypes rapides"
            ],
            'new_technology': [
                "Cr√©er un proof-of-concept",
                "Former l'√©quipe sur les nouvelles technologies",
                "Pr√©voir du temps de recherche et d√©veloppement",
                "Avoir un plan B avec technologies connues"
            ],
            'large_team': [
                "Diviser en sous-√©quipes de 4-6 personnes",
                "Nommer des leads techniques",
                "Mettre en place des standups quotidiens",
                "Utiliser des outils de collaboration avanc√©s"
            ]
        }
        
        return actions.get(risk_type, ["Surveiller et ajuster selon l'√©volution"])
        
    def apply_recommendation(self, recommendation_id: str, project_data: Dict[str, Any]) -> Dict[str, Any]:
        """Appliquer une recommandation √† un projet"""
        
        try:
            # Simuler l'application d'une recommandation
            result = {
                'success': True,
                'recommendation_id': recommendation_id,
                'applied_at': datetime.now().isoformat(),
                'estimated_impact': 'Positive',
                'next_steps': []
            }
            
            # Mettre √† jour les statistiques
            self.stats['recommendations_applied'] += 1
            
            # Enregistrer en base
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                UPDATE recommendations 
                SET applied = TRUE 
                WHERE id = ?
                """, (recommendation_id,))
                conn.commit()
                
            logger.info(f"‚úÖ Recommandation {recommendation_id} appliqu√©e")
            return result
            
        except Exception as e:
            logger.error(f"Erreur application recommandation: {e}")
            return {'success': False, 'error': str(e)}
            
    def get_stats(self) -> Dict[str, Any]:
        """Obtenir les statistiques du moteur de recommandations"""
        
        total_recs = self.stats['recommendations_generated']
        applied_recs = self.stats['recommendations_applied']
        application_rate = applied_recs / total_recs if total_recs > 0 else 0
        
        return {
            **self.stats,
            'application_rate': application_rate,
            'total_patterns': len(self.success_patterns),
            'models_trained': len(self.ml_models)
        }

# Instance globale
global_recommendation_engine: Optional[SmartRecommendationEngine] = None

def get_recommendation_engine() -> SmartRecommendationEngine:
    """Obtenir l'instance globale du moteur de recommandations"""
    global global_recommendation_engine
    
    if global_recommendation_engine is None:
        global_recommendation_engine = SmartRecommendationEngine()
        
    return global_recommendation_engine

def generate_project_recommendations(project_data: Dict[str, Any]) -> List[Recommendation]:
    """G√©n√©rer des recommandations pour un projet (fonction utilitaire)"""
    engine = get_recommendation_engine()
    return engine.generate_recommendations(project_data)

def get_contextual_suggestions(context: str, user_data: Dict[str, Any] = None) -> List[Recommendation]:
    """Obtenir des suggestions contextuelles"""
    engine = get_recommendation_engine()
    
    # Suggestions bas√©es sur le contexte
    suggestions = []
    
    if context == "project_creation":
        # Suggestions pour la cr√©ation de projet
        suggestions = engine.generate_recommendations({
            'description': user_data.get('project_type', ''),
            'estimated_duration': user_data.get('duration', 60),
            'estimated_budget': user_data.get('budget', 30000)
        })
        
    return suggestions[:5]  # Top 5 suggestions